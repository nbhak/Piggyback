<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008">
  <Color x:Key="BlackColor">#FF000000</Color>
  <Color x:Key="WhiteColor">#FFFFFFFF</Color>
  <SolidColorBrush x:Key="TextBrush" Color="#FFFFFFFF"/>
  <Color x:Key="NormalBrushGradient1">#FFF1BCBE</Color>
  <Color x:Key="NormalBrushGradient2">#FFCE6865</Color>
  <Color x:Key="NormalBrushGradient3">#FFAF231E</Color>
  <Color x:Key="NormalBrushGradient4">#FF601818</Color>
  <Color x:Key="NormalBorderBrushGradient1">#FFBBBBBB</Color>
  <Color x:Key="NormalBorderBrushGradient2">#FF737373</Color>
  <Color x:Key="NormalBorderBrushGradient3">#FF646464</Color>
  <Color x:Key="NormalBorderBrushGradient4">#FF000000</Color>
  <Color x:Key="SelectedBackgroundGradient1">#FFBBBBBB</Color>
  <Color x:Key="SelectedBackgroundGradient2">#FF737373</Color>
  <Color x:Key="SelectedBackgroundGradient3">#FF646464</Color>
  <Color x:Key="SelectedBackgroundGradient4">#FFA1A1A1</Color>
  <Color x:Key="SliderBorderGradient1">#FF3F3F3F</Color>
  <Color x:Key="SliderBorderGradient2">#FFADADAD</Color>
  <Color x:Key="ShadeBrushGradient1">#FF62676A</Color>
  <Color x:Key="ShadeBrushGradient2">#FFD1D4D6</Color>
  <Color x:Key="ShadeBrushGradient3">#FFFFFFFF</Color>
  <Color x:Key="WindowBackgroundBrushGradient1">#FFD1D1D1</Color>
  <Color x:Key="WindowBackgroundBrushGradient2">#FF8496AA</Color>
  <LinearGradientBrush x:Key="NormalBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource NormalBrushGradient1}" Offset="0"/>
    <GradientStop Color="{StaticResource NormalBrushGradient2}" Offset="0.41800001263618469"/>
    <GradientStop Color="{StaticResource NormalBrushGradient3}" Offset="0.418"/>
    <GradientStop Color="{StaticResource NormalBrushGradient4}" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource NormalBorderBrushGradient1}"/>
    <GradientStop Color="{StaticResource NormalBorderBrushGradient2}" Offset="0.38"/>
    <GradientStop Color="{StaticResource NormalBorderBrushGradient3}" Offset="0.384"/>
    <GradientStop Color="{StaticResource NormalBorderBrushGradient4}" Offset="1"/>
  </LinearGradientBrush>
  <RadialGradientBrush x:Key="HoverBrush">
    <Brush.RelativeTransform>
      <TransformGroup>
        <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.804" ScaleY="0.743"/>
        <SkewTransform CenterX="0.5" CenterY="0.5"/>
        <RotateTransform CenterX="0.5" CenterY="0.5"/>
        <TranslateTransform Y="0.47999998927116394"/>
      </TransformGroup>
    </Brush.RelativeTransform>
    <GradientStop Color="#FFFFC398" Offset="0.209"/>
    <GradientStop Color="#00FFB598" Offset="1"/>
    <GradientStop Color="#FFFFFFFF" Offset="0"/>
  </RadialGradientBrush>
  <LinearGradientBrush x:Key="CheckIconBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FF006CD1"/>
    <GradientStop Color="#FFA5D6F9" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ShadeBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource ShadeBrushGradient2}" Offset="0"/>
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="0.1"/>
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ShadeBrushTop" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource ShadeBrushGradient2}" Offset="0"/>
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="0.1"/>
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ShadeBrushBottom" EndPoint="0.5,0" StartPoint="0.5,1">
    <GradientStop Color="{StaticResource ShadeBrushGradient2}"/>
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="0.1"/>
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ShadeBrushLeft" EndPoint="1,0.5" StartPoint="0,0.5">
    <GradientStop Color="{StaticResource ShadeBrushGradient2}"/>
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="0.1"/>
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ShadeBrushRight" EndPoint="0,0.5" StartPoint="1,0.5">
    <GradientStop Color="{StaticResource ShadeBrushGradient2}"/>
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="0.1"/>
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="DisabledBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFFFFFFF"/>
    <GradientStop Color="#FF62676A" Offset="1"/>
    <GradientStop Color="#FFD1D4D6" Offset="0.41800001263618469"/>
    <GradientStop Color="#FFA9AFB5" Offset="0.425"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="SelectedBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource SelectedBackgroundGradient1}"/>
    <GradientStop Color="{StaticResource SelectedBackgroundGradient2}" Offset="0.38"/>
    <GradientStop Color="{StaticResource SelectedBackgroundGradient3}" Offset="0.384"/>
    <GradientStop Color="{StaticResource SelectedBackgroundGradient4}" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="SelectedBackgroundBrushVertical" EndPoint="2.05,0.5" StartPoint="-0.55,0.5">
    <GradientStop Color="{StaticResource SelectedBackgroundGradient1}"/>
    <GradientStop Color="{StaticResource SelectedBackgroundGradient2}" Offset="0.37999999523162842"/>
    <GradientStop Color="{StaticResource SelectedBackgroundGradient3}" Offset="0.38400000333786011"/>
    <GradientStop Color="{StaticResource SelectedBackgroundGradient4}" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="HorizontalSliderBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource SliderBorderGradient1}"/>
    <GradientStop Color="{StaticResource SliderBorderGradient2}" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="VerticalSliderBorderBrush" EndPoint="1.35,0.5" StartPoint="0.6,0.5">
    <GradientStop Color="{StaticResource SliderBorderGradient1}"/>
    <GradientStop Color="{StaticResource SliderBorderGradient2}" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="WindowBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource WindowBackgroundBrushGradient1}"/>
    <GradientStop Color="{StaticResource WindowBackgroundBrushGradient2}" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFF" Offset="0.0"/>
    <GradientStop Color="#AAA" Offset="1.0"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#BBB" Offset="0.0"/>
    <GradientStop Color="#EEE" Offset="0.1"/>
    <GradientStop Color="#EEE" Offset="0.9"/>
    <GradientStop Color="#FFF" Offset="1.0"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#444" Offset="0.0"/>
    <GradientStop Color="#888" Offset="1.0"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="LightBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFF" Offset="0.0"/>
    <GradientStop Color="#EEE" Offset="1.0"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#FF636363"/>
  <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA"/>
  <LinearGradientBrush x:Key="DefaultedBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#777" Offset="0.0"/>
    <GradientStop Color="#000" Offset="1.0"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="SolidBorderBrush" Color="#888"/>
  <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA"/>
  <SolidColorBrush x:Key="LightColorBrush" Color="#DDD"/>
  <SolidColorBrush x:Key="GlyphBrush" Color="{StaticResource WhiteColor}"/>
  <Style x:Key="NuclearButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="2" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Button}" BasedOn="{x:Null}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}"/>
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Template" Value="{DynamicResource ButtonTemplate}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
  </Style>
  <ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type Button}">
    <FrameworkTemplate.Resources>
      <Storyboard x:Key="HoverOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="HoverOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="PressedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="PressedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="FocusedOn">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement"
                                       Storyboard.TargetProperty="(UIElement.Visibility)">
          <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Visible}"/>
        </ObjectAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="FocusedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </FrameworkTemplate.Resources>
    <Grid x:Name="Grid">
      <Border x:Name="Background" Background="{TemplateBinding Control.Background}"
              BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="2,2,2,2"
              CornerRadius="2,2,2,2">
        <Border x:Name="Hover" Background="{StaticResource HoverBrush}" CornerRadius="1,1,1,1" Height="Auto"
                Width="Auto" Opacity="0"/>
      </Border>
      <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        Margin="{TemplateBinding Control.Padding}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"/>
      <Border x:Name="FocusVisualElement" IsHitTestVisible="false" BorderBrush="{StaticResource HoverBrush}"
              BorderThickness="2,2,2,2" CornerRadius="2,2,2,2" Opacity="0"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Button.IsDefault" Value="true">
        <Setter TargetName="Background" Value="{DynamicResource DefaultedBorderBrush}"
                Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource FocusedOn}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}"/>
        </TriggerBase.ExitActions>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOff}"/>
        </TriggerBase.ExitActions>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource PressedOn}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource PressedOff}"/>
        </TriggerBase.ExitActions>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="true"/>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Background"
                Property="Border.Background"/>
        <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Background" Property="Border.BorderBrush"/>
        <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RadioButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CheckBoxFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type CheckBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Template" Value="{DynamicResource CheckBoxTemplate}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="Control.Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="CheckBoxTemplate" TargetType="{x:Type CheckBox}">
    <FrameworkTemplate.Resources>
      <Storyboard x:Key="CheckedFalse">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckIcon"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="CheckedTrue">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckIcon"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="ThreeStateOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateIcon"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="ThreeStateOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateIcon"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="HoverOn">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="HoverOff">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="PressedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="PressedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </FrameworkTemplate.Resources>
    <BulletDecorator Background="Transparent">
      <BulletDecorator.Bullet>
        <Grid Width="16" Height="16">
          <Rectangle x:Name="Background" Height="14" Margin="1" Width="14" Fill="{TemplateBinding Control.Background}"
                     Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="2" RadiusX="1" RadiusY="1"/>
          <Rectangle x:Name="BackgroundOverlay" Height="12" Width="12" Opacity="0" Fill="{StaticResource HoverBrush}"
                     StrokeThickness="1" RadiusX="1" RadiusY="1" Stroke="{x:Null}"/>
          <Path x:Name="CheckIcon" Opacity="0" Stretch="Fill"
                Data="M 102.03442,598.79645 L 105.22962,597.78918 106.95686,599.19977 C 106.95686,599.19977 113.77958,590.53656 113.77958,590.53656 113.77958,590.53656 107.40649,603.79431 107.40649,603.79431 Z"
                Fill="#FFFFFFFF" Height="10" Width="11" Stroke="{StaticResource CheckIconBrush}"
                StrokeThickness="0"/>
          <Rectangle x:Name="IndeterminateIcon" Height="9" Width="9" Opacity="0" Fill="#FFFFFFFF"
                     Stroke="{StaticResource CheckIconBrush}" RadiusX="1" RadiusY="1"/>
          <Rectangle x:Name="DisabledVisualElement" Height="14" Width="14" Opacity="0"
                     Fill="{StaticResource DisabledBackgroundBrush}" RadiusX="1" RadiusY="1"/>
          <Rectangle x:Name="ContentFocusVisualElement" Height="16" Width="16" IsHitTestVisible="false" Opacity="0"
                     Stroke="{StaticResource HoverBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
        </Grid>
      </BulletDecorator.Bullet>
      <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        Margin="{TemplateBinding Control.Padding}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"/>
    </BulletDecorator>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ToggleButton.IsChecked" Value="True"/>
          <Condition Property="ToggleButton.IsThreeState" Value="true"/>
        </MultiTrigger.Conditions>
        <TriggerBase.EnterActions>
          <BeginStoryboard x:Name="ThreeStateOn_BeginStoryboard" Storyboard="{StaticResource CheckedFalse}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard x:Name="ThreeStateOff_BeginStoryboard" Storyboard="{StaticResource CheckedTrue}"/>
        </TriggerBase.ExitActions>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Value="{x:Null}" Property="ToggleButton.IsChecked"/>
          <Condition Property="ToggleButton.IsThreeState" Value="true"/>
        </MultiTrigger.Conditions>
        <TriggerBase.EnterActions>
          <BeginStoryboard x:Name="ThreeStateOn1_BeginStoryboard" Storyboard="{StaticResource ThreeStateOn}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard x:Name="ThreeStateOff1_BeginStoryboard" Storyboard="{StaticResource ThreeStateOff}"/>
        </TriggerBase.ExitActions>
        <Setter TargetName="CheckIcon" Property="UIElement.Visibility" Value="Hidden"/>
      </MultiTrigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <TriggerBase.ExitActions>
          <BeginStoryboard x:Name="CheckedTrue_BeginStoryboard" Storyboard="{StaticResource CheckedFalse}"/>
        </TriggerBase.ExitActions>
        <TriggerBase.EnterActions>
          <BeginStoryboard x:Name="CheckedTrue_BeginStoryboard1" Storyboard="{StaticResource CheckedTrue}"/>
        </TriggerBase.EnterActions>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOff}"/>
        </TriggerBase.ExitActions>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource PressedOn}"/>
        </TriggerBase.EnterActions>
        <TriggerBase.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource PressedOff}"/>
        </TriggerBase.ExitActions>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="Background" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill"/>
        <Setter TargetName="Background" Value="{DynamicResource DisabledBorderBrush}" Property="Shape.Stroke"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="CheckedFalse">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckIcon"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedTrue">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckIcon"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
              <Grid Width="16" Height="16">
                <Ellipse x:Name="Background" Height="14" Margin="1" Width="14" Fill="{StaticResource NormalBrush}"
                         Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="2"/>
                <Ellipse x:Name="BackgroundOverlay" Height="12" Width="12" Opacity="0" Fill="{StaticResource HoverBrush}"
                         Stroke="#00000000" Margin="2,2,2,2" StrokeThickness="0"/>
                <Border x:Name="CheckIcon" HorizontalAlignment="Center" VerticalAlignment="Center" Width="6" Height="6"
                        CornerRadius="1,1,1,1" BorderThickness="1,1,1,1" Background="#FFFFFFFF"
                        BorderBrush="{StaticResource CheckIconBrush}" Opacity="0"/>
              </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"/>
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="false">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="CheckedTrue_BeginStoryboard" Storyboard="{StaticResource CheckedTrue}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource CheckedFalse}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOn}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOff}"/>
              </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Background" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill"/>
              <Setter TargetName="Background" Value="{DynamicResource DisabledBorderBrush}" Property="Shape.Stroke"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="Control.Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="NuclearRepeatButton" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid>
            <Border x:Name="Border" Background="{TemplateBinding Control.Background}" CornerRadius="2,2,2,2"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="2"/>
            <Rectangle x:Name="BackgroundAnimation" Opacity="0" Fill="{StaticResource HoverBrush}" StrokeThickness="0"
                       RadiusX="1" RadiusY="1" Margin="2,2,2,2" Stroke="{x:Null}"/>
            <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOn}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOff}"/>
              </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NuclearThumbStyle" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundMouseOver"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundMouseOver"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid x:Name="Grid" Margin="0,0,0,0">
            <Rectangle x:Name="Background" Fill="{StaticResource NormalBrush}" StrokeThickness="2" RadiusX="2" RadiusY="2"
                       Stroke="{StaticResource NormalBorderBrush}"/>
            <Rectangle x:Name="BackgroundMouseOver" Fill="{StaticResource HoverBrush}" StrokeThickness="1" RadiusX="1"
                       RadiusY="1" Margin="2,2,2,2" Opacity="0" Stroke="{x:Null}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="true"/>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="Thumb.IsDragging" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOn}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOff}"/>
              </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Background" Property="Shape.Fill"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Background" Property="Shape.Stroke"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NuclearScrollRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.IsTabStop" Value="false"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid>
            <Rectangle Fill="{TemplateBinding Control.Background}" Stroke="{TemplateBinding Control.BorderBrush}"
                       StrokeThickness="{TemplateBinding Control.BorderThickness}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
            <Grid.RowDefinitions>
              <RowDefinition MaxHeight="18"/>
              <RowDefinition Height="0.00001*"/>
              <RowDefinition MaxHeight="18"/>
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3" Background="#FFDDDEDF" CornerRadius="3,3,3,3"/>
            <RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource NuclearRepeatButton}"
                          Command="ScrollBar.LineUpCommand">
              <Grid>
                <Path x:Name="DecreaseArrow" StrokeThickness="1" Data="M 0,4 L 8,4 4,0 Z"
                      Fill="{DynamicResource GlyphBrush}"/>
              </Grid>
            </RepeatButton>
            <Track x:Name="PART_Track" Grid.Row="1" Orientation="Vertical" IsDirectionReversed="true">
              <Track.Thumb>
                <Thumb Style="{DynamicResource NuclearThumbStyle}"/>
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton x:Name="PageUp" Style="{DynamicResource NuclearScrollRepeatButtonStyle}"
                              Command="ScrollBar.PageDownCommand"/>
              </Track.IncreaseRepeatButton>
              <Track.DecreaseRepeatButton>
                <RepeatButton x:Name="PageDown" Style="{DynamicResource NuclearScrollRepeatButtonStyle}"
                              Command="ScrollBar.PageUpCommand"/>
              </Track.DecreaseRepeatButton>
            </Track>
            <RepeatButton x:Name="IncreaseRepeat" Grid.Row="2" Style="{DynamicResource NuclearRepeatButton}"
                          Command="ScrollBar.LineDownCommand">
              <Grid>
                <Path x:Name="IncreaseArrow" StrokeThickness="1" Data="M 0,0 L 4,4 8,0 Z"
                      Fill="{DynamicResource GlyphBrush}"/>
              </Grid>
            </RepeatButton>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
              <Setter TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_Track" Property="Track.Orientation" Value="Vertical"/>
              <Setter TargetName="DecreaseRepeat" Property="ButtonBase.Command" Value="ScrollBar.LineLeftCommand"/>
              <Setter TargetName="IncreaseRepeat" Property="ButtonBase.Command" Value="ScrollBar.LineRightCommand"/>
              <Setter TargetName="PageDown" Property="ButtonBase.Command" Value="ScrollBar.PageLeftCommand"/>
              <Setter TargetName="PageUp" Property="ButtonBase.Command" Value="ScrollBar.PageRightCommand"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Background" Value="#FFDDDEDF"/>
  </Style>
  <Style TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Control.Padding}"
                                    Content="{TemplateBinding ContentControl.Content}"
                                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                    CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"/>
            <ScrollBar x:Name="PART_HorizontalScrollBar"
                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Grid.Column="0"
                       Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       Minimum="0" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                       AutomationProperties.AutomationId="HorizontalScrollBar"
                       Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ScrollBar x:Name="PART_VerticalScrollBar"
                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Grid.Column="1"
                       Grid.Row="0" Orientation="Vertical" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       Minimum="0" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                       AutomationProperties.AutomationId="VerticalScrollBar"
                       Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ListBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Grid>
            <Border x:Name="Border" CornerRadius="2" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
            <ScrollViewer Focusable="false" Margin="0,0,0,1">
              <StackPanel Margin="2" IsItemsHost="true"/>
            </ScrollViewer>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ListBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid x:Name="grid" Background="{TemplateBinding Control.Background}" Margin="1,1,1,1"
                SnapsToDevicePixels="true">
            <Rectangle x:Name="Background" IsHitTestVisible="false" Fill="{StaticResource SelectedBackgroundBrush}"
                       RadiusX="0"/>
            <Rectangle x:Name="SelectedRectangle" IsHitTestVisible="false" Opacity="0" Fill="{StaticResource NormalBrush}"
                       RadiusX="0"/>
            <Rectangle x:Name="HoverRectangle" IsHitTestVisible="false" Fill="{StaticResource HoverBrush}" RadiusX="0"
                       Opacity="0"/>
            <ContentPresenter x:Name="contentPresenter" Margin="5,3,3,3"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="ListBoxItem.IsSelected" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource SelectedOn}"/>
              </TriggerBase.EnterActions>
              <TriggerBase.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource SelectedOff}"/>
              </TriggerBase.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
  </Style>
  <Style x:Key="ExpanderHeaderFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle SnapsToDevicePixels="true" Margin="0" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.6"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Border x:Name="border" Padding="{TemplateBinding Control.Padding}" Background="#FFFFFFFF"
                  BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
            <Grid SnapsToDevicePixels="false" Background="Transparent">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="21"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Rectangle x:Name="Rectangle" Margin="3,3,3,3" Fill="{DynamicResource NormalBrush}"
                         Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
              <Rectangle x:Name="HoverRectangle" Margin="3,3,3,3" Fill="{DynamicResource HoverBrush}"
                         Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2"
                         Opacity="0"/>
              <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
                    Fill="{DynamicResource GlyphBrush}" Data="M 0,0 L 4,4 8,0 Z"/>
              <Path x:Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center"
                    Fill="{DynamicResource GlyphBrush}" Data="M 0,4 L 4,0 8,4 Z"/>
              <ContentPresenter SnapsToDevicePixels="true" HorizontalAlignment="Left" Margin="4,3,0,3" VerticalAlignment="Center"
                                Grid.Column="1" RecognizesAccessKey="true"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill"/>
              <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.6"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Border x:Name="border" Padding="{TemplateBinding Control.Padding}" Background="#FFFFFFFF"
                  BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
            <Grid SnapsToDevicePixels="false" Background="Transparent">
              <Grid.RowDefinitions>
                <RowDefinition Height="21"/>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <Grid>
                <FrameworkElement.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="-90"/>
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </FrameworkElement.LayoutTransform>
                <Rectangle x:Name="Rectangle" Margin="3,3,1,3" Fill="{DynamicResource NormalBrush}"
                           Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
                <Rectangle x:Name="HoverRectangle" Margin="3,3,1,3" Fill="{DynamicResource HoverBrush}"
                           Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2"
                           Opacity="0"/>
                <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Fill="{DynamicResource GlyphBrush}" Data="M 0,0 L 4,4 8,0 Z"/>
                <Path x:Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Fill="{DynamicResource GlyphBrush}" Data="M 0,4 L 4,0 8,4 Z"/>
              </Grid>
              <ContentPresenter SnapsToDevicePixels="true" HorizontalAlignment="Center" Margin="2,4,4,0" VerticalAlignment="Top"
                                Grid.Row="1" RecognizesAccessKey="true">
                <FrameworkElement.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="-90"/>
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </FrameworkElement.LayoutTransform>
              </ContentPresenter>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill"/>
              <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.6"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Border x:Name="border" Padding="{TemplateBinding Control.Padding}" CornerRadius="2,2,2,2"
                  BorderThickness="1,1,1,1" Background="#FFFFFFFF" BorderBrush="{DynamicResource NormalBorderBrush}">
            <Grid SnapsToDevicePixels="false" Background="Transparent">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="21"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Grid>
                <FrameworkElement.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="180"/>
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </FrameworkElement.LayoutTransform>
                <Rectangle x:Name="Rectangle" Margin="3,3,3,3" Fill="{DynamicResource NormalBrush}"
                           Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
                <Rectangle x:Name="HoverRectangle" Margin="3,3,3,3" Fill="{DynamicResource HoverBrush}"
                           Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2"
                           Opacity="0"/>
                <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Fill="{DynamicResource GlyphBrush}" Data="M 0,0 L 4,4 8,0 Z"/>
                <Path x:Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Fill="{DynamicResource GlyphBrush}" Data="M 0,4 L 4,0 8,4 Z"/>
              </Grid>
              <ContentPresenter SnapsToDevicePixels="true" HorizontalAlignment="Left" Margin="4,3,0,3" VerticalAlignment="Center"
                                Grid.Column="1" RecognizesAccessKey="true"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
              <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.6"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Border x:Name="border" Padding="{TemplateBinding Control.Padding}" CornerRadius="2,2,2,2"
                  Background="#FFFFFFFF" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1">
            <Grid SnapsToDevicePixels="false" Background="Transparent">
              <Grid.RowDefinitions>
                <RowDefinition Height="21"/>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <Grid>
                <FrameworkElement.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="90"/>
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </FrameworkElement.LayoutTransform>
                <Rectangle x:Name="Rectangle" Margin="3,3,3,3" Fill="{DynamicResource NormalBrush}"
                           Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
                <Rectangle x:Name="HoverRectangle" Margin="3,3,3,3" Fill="{DynamicResource HoverBrush}"
                           Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2"
                           Opacity="0"/>
                <Path x:Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Fill="{DynamicResource GlyphBrush}" Data="M 0,0 L 4,4 8,0 Z"/>
                <Path x:Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Fill="{DynamicResource GlyphBrush}" Data="M 0,4 L 4,0 8,4 Z"/>
              </Grid>
              <ContentPresenter SnapsToDevicePixels="true" HorizontalAlignment="Center" Margin="4,4,2,0" VerticalAlignment="Top"
                                Grid.Row="1" RecognizesAccessKey="true">
                <FrameworkElement.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="90"/>
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </FrameworkElement.LayoutTransform>
              </ContentPresenter>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill"/>
              <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Expander}">
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Border SnapsToDevicePixels="true" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1,1,1,1" CornerRadius="3">
            <DockPanel>
              <ToggleButton x:Name="HeaderSite" FontFamily="{TemplateBinding Control.FontFamily}"
                            FontSize="{TemplateBinding Control.FontSize}" FontStretch="{TemplateBinding Control.FontStretch}"
                            FontStyle="{TemplateBinding Control.FontStyle}" FontWeight="{TemplateBinding Control.FontWeight}"
                            Foreground="{TemplateBinding Control.Foreground}"
                            HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            Padding="{TemplateBinding Control.Padding}"
                            VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Margin="1,1,1,0" MinHeight="0"
                            MinWidth="0" Style="{StaticResource ExpanderDownHeaderStyle}"
                            Content="{TemplateBinding HeaderedContentControl.Header}"
                            ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                            ContentTemplateSelector="{TemplateBinding HeaderedContentControl.HeaderTemplateSelector}"
                            DockPanel.Dock="Top"
                            IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
              <Grid x:Name="grid" Visibility="Collapsed">
                <Border x:Name="border" Background="{DynamicResource ShadeBrush}"
                        BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,0,1,1" CornerRadius="3,3,3,3"
                        Margin="0,0,0,0"/>
                <ContentPresenter x:Name="ExpandSite" Focusable="false" HorizontalAlignment="Left" Margin="1,1,1,1"
                                  VerticalAlignment="Top" DockPanel.Dock="Bottom"/>
              </Grid>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Expander.IsExpanded" Value="true">
              <Setter TargetName="grid" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="Expander.ExpandDirection" Value="Down">
              <Setter TargetName="grid" Property="FrameworkElement.Margin" Value="1,0,1,0"/>
            </Trigger>
            <Trigger Property="Expander.ExpandDirection" Value="Right">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right"/>
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left"/>
              <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"
                      Property="FrameworkElement.Style"/>
              <Setter TargetName="border" Value="{DynamicResource ShadeBrushRight}" Property="Border.Background"/>
              <Setter TargetName="grid" Property="FrameworkElement.Margin" Value="0,1,0,1"/>
            </Trigger>
            <Trigger Property="Expander.ExpandDirection" Value="Up">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top"/>
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom"/>
              <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"
                      Property="FrameworkElement.Style"/>
              <Setter TargetName="border" Value="{DynamicResource ShadeBrushBottom}" Property="Border.Background"/>
              <Setter TargetName="grid" Property="FrameworkElement.Margin" Value="1,0,1,0"/>
            </Trigger>
            <Trigger Property="Expander.ExpandDirection" Value="Left">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left"/>
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right"/>
              <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"
                      Property="FrameworkElement.Style"/>
              <Setter TargetName="border" Value="{DynamicResource ShadeBrushLeft}" Property="Border.Background"/>
              <Setter TargetName="grid" Property="FrameworkElement.Margin" Value="0,1,0,1"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <FrameworkTemplate.Resources>
      <Storyboard x:Key="HoverOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="HoverOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="PressedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.6"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="PressedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </FrameworkTemplate.Resources>
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition/>
        <ColumnDefinition Width="20"/>
      </Grid.ColumnDefinitions>
      <Rectangle x:Name="Rectangle" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                 Width="Auto" Height="Auto" RadiusX="3" RadiusY="3" Fill="{DynamicResource NormalBrush}"
                 Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="2"/>
      <Rectangle x:Name="HoverRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto"
                 Height="Auto" RadiusX="3" RadiusY="3" Fill="{DynamicResource HoverBrush}" StrokeThickness="2"
                 Grid.ColumnSpan="2" Opacity="0" Grid.Column="1" Margin="0,2,2,2" Stroke="{x:Null}"/>
      <Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto"
                 Height="Auto" RadiusX="2" RadiusY="2" Margin="2,2,0,2" Stroke="{x:Null}">
        <Shape.Fill>
          <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
        </Shape.Fill>
      </Rectangle>
      <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center"
            Fill="{DynamicResource GlyphBrush}" Data="M 0,0 L 4,4 8,0 Z" Margin="-2,2,0,0"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <TriggerBase.ExitActions>
          <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
        </TriggerBase.ExitActions>
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
        </TriggerBase.EnterActions>
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <TriggerBase.ExitActions>
          <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
        </TriggerBase.ExitActions>
        <TriggerBase.EnterActions>
          <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
        </TriggerBase.EnterActions>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Rectangle" Property="Shape.Fill"/>
        <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle" Property="Shape.Stroke"/>
        <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
        <Setter Value="{DynamicResource DisabledForegroundBrush}" TargetName="Arrow" Property="Shape.Fill"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
    <Border x:Name="PART_ContentHost" Focusable="false" Background="{TemplateBinding Control.Background}"/>
  </ControlTemplate>
  <Style TargetType="{x:Type ComboBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Template" Value="{DynamicResource ComboBoxTemplate}"/>
  </Style>
  <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
    <Grid>
      <ToggleButton x:Name="ToggleButton" Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}"
                    Focusable="false" ClickMode="Press"
                    IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
      <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Left" Margin="3,3,23,3" VerticalAlignment="Center"
                        Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                        ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                        ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                        IsHitTestVisible="false"/>
      <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}"
               HorizontalAlignment="Left" Margin="3,3,23,3" VerticalAlignment="Center" Focusable="true"
               Background="Transparent" IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}" Style="{x:Null}"/>
      <Popup x:Name="Popup" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" Placement="Bottom"
             Focusable="false" AllowsTransparency="true" PopupAnimation="Slide">
        <Grid x:Name="DropDown" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
              MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" SnapsToDevicePixels="true">
          <Border x:Name="DropDownBorder" Background="{DynamicResource ShadeBrush}"
                  BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
          <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="true" HorizontalScrollBarVisibility="Auto"
                        VerticalScrollBarVisibility="Auto" CanContentScroll="true">
            <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Contained"/>
          </ScrollViewer>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
      </Trigger>
      <Trigger Property="ItemsControl.IsGrouping" Value="true">
        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
      </Trigger>
      <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
        <Setter TargetName="DropDownBorder" Property="FrameworkElement.Margin" Value="0,0,0,0"/>
        <Setter TargetName="DropDownBorder" Property="Border.CornerRadius" Value="3,3,3,3"/>
      </Trigger>
      <Trigger Property="ComboBox.IsEditable" Value="true">
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type ComboBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="SelectedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid SnapsToDevicePixels="true" Margin="0,1,0,1">
            <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
            <Border x:Name="SelectedBorder" Background="{DynamicResource NormalBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Opacity="0"/>
            <Border x:Name="HoverBorder" Background="{DynamicResource HoverBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" Opacity="0"/>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Margin="5,2,0,2"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="ComboBoxItem.IsHighlighted" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Background" Value="{DynamicResource SelectedBackgroundBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
  </Style>
  <Style TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="IndeterminateOn">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateGradientFill"
                                             Storyboard.TargetProperty="(Shape.Fill).(LinearGradientBrush.Transform).(TransformGroup.Children)[0].X"
                                             RepeatBehavior="Forever">
                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                <SplineDoubleKeyFrame KeyTime="00:00:.5" Value="20"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid>
            <Border x:Name="PART_Track" Background="{DynamicResource ShadeBrush}"
                    BorderBrush="{DynamicResource DisabledBackgroundBrush}" BorderThickness="2,2,2,2"
                    CornerRadius="6,6,6,6"/>
            <Border x:Name="PART_Indicator" HorizontalAlignment="Left" Background="{DynamicResource NormalBrush}"
                    BorderThickness="1" CornerRadius="7,7,7,7" BorderBrush="{x:Null}"/>
            <Grid x:Name="IndeterminateRoot" Visibility="Collapsed">
              <Rectangle x:Name="IndeterminateGradientFill" Margin="1,1,1,1" Opacity="0.7" RadiusX="5" RadiusY="5"
                         StrokeThickness="0">
                <Shape.Fill>
                  <LinearGradientBrush EndPoint="0,1" StartPoint="20,1" MappingMode="Absolute" SpreadMethod="Repeat">
                    <Brush.Transform>
                      <TransformGroup>
                        <TranslateTransform X="0"/>
                        <SkewTransform AngleX="-30"/>
                      </TransformGroup>
                    </Brush.Transform>
                    <GradientStop Color="#FFFFFFFF" Offset="0"/>
                    <GradientStop Color="#00FFFFFF" Offset=".25"/>
                    <GradientStop Color="#FFFFFFFF" Offset="0.85"/>
                  </LinearGradientBrush>
                </Shape.Fill>
                <UIElement.OpacityMask>
                  <LinearGradientBrush EndPoint="0.004,0.465" StartPoint="0.997,0.422">
                    <GradientStop Color="#00FFFFFF"/>
                    <GradientStop Color="#00FFFFFF" Offset="1"/>
                    <GradientStop Color="#FFFFFFFF" Offset="0.486"/>
                  </LinearGradientBrush>
                </UIElement.OpacityMask>
              </Rectangle>
            </Grid>
            <Border x:Name="DisabledBorder" Background="{DynamicResource DisabledBackgroundBrush}"
                    BorderBrush="{DynamicResource DisabledBackgroundBrush}" BorderThickness="2,2,2,2"
                    CornerRadius="6,6,6,6" Opacity="0"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.8"/>
            </Trigger>
            <Trigger Property="ProgressBar.IsIndeterminate" Value="true">
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource IndeterminateOn}"/>
              </TriggerBase.EnterActions>
              <Setter TargetName="IndeterminateRoot" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type TextBox}">
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="Control.Template" Value="{DynamicResource TextBoxTemplate}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}"/>
  </Style>
  <ControlTemplate x:Key="TextBoxTemplate" TargetType="{x:Type TextBox}">
    <FrameworkTemplate.Resources>
      <Storyboard x:Key="HoverOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="HoverOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="FocusedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="FocusedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement"
                                       Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </FrameworkTemplate.Resources>
    <Grid>
      <Border x:Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,2,2">
        <Grid>
          <Border BorderThickness="1" CornerRadius="1,1,1,1">
            <Border.BorderBrush>
              <SolidColorBrush Color="Transparent" x:Name="MouseOverColor"/>
            </Border.BorderBrush>
            <ScrollViewer x:Name="PART_ContentHost" Margin="0" Background="{TemplateBinding Control.Background}"/>
          </Border>
        </Grid>
      </Border>
      <Border x:Name="HoverBorder" Opacity="0" BorderBrush="{StaticResource NormalBrush}"
              BorderThickness="2,2,2,2" CornerRadius="2,2,2,2"/>
      <Border x:Name="DisabledVisualElement" IsHitTestVisible="false" Opacity="0" Background="#FFFFFFFF"
              BorderBrush="#A5F7F7F7" BorderThickness="{TemplateBinding Control.BorderThickness}"
              CornerRadius="2,2,2,2"/>
      <Border x:Name="FocusVisualElement" IsHitTestVisible="false" Opacity="0"
              BorderBrush="{StaticResource NormalBrush}" BorderThickness="2.1,2.1,2.1,2.1"
              CornerRadius="0.2,0.2,0.2,0.2"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsFocused" Value="true">
        <TriggerBase.ExitActions>
          <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}"/>
        </TriggerBase.ExitActions>
        <TriggerBase.EnterActions>
          <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}"/>
        </TriggerBase.EnterActions>
      </Trigger>
      <MultiTrigger>
        <TriggerBase.ExitActions>
          <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
        </TriggerBase.ExitActions>
        <TriggerBase.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
        </TriggerBase.EnterActions>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
          <Condition Property="UIElement.IsFocused" Value="false"/>
        </MultiTrigger.Conditions>
      </MultiTrigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
        <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.BorderBrush"/>
        <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type PasswordBox}">
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid>
            <Border x:Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,2,2">
              <Grid>
                <Border BorderThickness="1" CornerRadius="1,1,1,1">
                  <Border.BorderBrush>
                    <SolidColorBrush Color="Transparent" x:Name="MouseOverColor"/>
                  </Border.BorderBrush>
                  <ScrollViewer x:Name="PART_ContentHost" Margin="0" Background="{TemplateBinding Control.Background}"/>
                </Border>
              </Grid>
            </Border>
            <Border x:Name="HoverBorder" Opacity="0" BorderBrush="{StaticResource NormalBrush}"
                    BorderThickness="2,2,2,2" CornerRadius="2,2,2,2"/>
            <Border x:Name="DisabledVisualElement" IsHitTestVisible="false" Opacity="0" Background="#FFFFFFFF"
                    BorderBrush="#A5F7F7F7" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="2,2,2,2"/>
            <Border x:Name="FocusVisualElement" IsHitTestVisible="false" Opacity="0"
                    BorderBrush="{StaticResource NormalBrush}" BorderThickness="2.1,2.1,2.1,2.1"
                    CornerRadius="0.2,0.2,0.2,0.2"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <MultiTrigger>
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="UIElement.IsFocused" Value="false"/>
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}"/>
  </Style>
  <Style TargetType="{x:Type RichTextBox}">
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RichTextBox}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid>
            <Border x:Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,2,2">
              <Grid>
                <Border BorderThickness="1" CornerRadius="1,1,1,1">
                  <Border.BorderBrush>
                    <SolidColorBrush Color="Transparent" x:Name="MouseOverColor"/>
                  </Border.BorderBrush>
                  <ScrollViewer x:Name="PART_ContentHost" Margin="0" Background="{TemplateBinding Control.Background}"/>
                </Border>
              </Grid>
            </Border>
            <Border x:Name="HoverBorder" Opacity="0" BorderBrush="{StaticResource NormalBrush}"
                    BorderThickness="2,2,2,2" CornerRadius="2,2,2,2"/>
            <Border x:Name="DisabledVisualElement" IsHitTestVisible="false" Opacity="0" Background="#FFFFFFFF"
                    BorderBrush="#A5F7F7F7" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="2,2,2,2"/>
            <Border x:Name="FocusVisualElement" IsHitTestVisible="false" Opacity="0"
                    BorderBrush="{StaticResource NormalBrush}" BorderThickness="2.1,2.1,2.1,2.1"
                    CornerRadius="0.2,0.2,0.2,0.2"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <MultiTrigger>
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="UIElement.IsFocused" Value="false"/>
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.BorderBrush"/>
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}"/>
  </Style>
  <Style TargetType="{x:Type Label}">
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Top"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Label}">
          <Grid>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false"/>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Menu}">
    <Setter Property="Control.Background" Value="{DynamicResource WindowBackgroundBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <Grid>
            <Border x:Name="Border" Margin="1" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"/>
            <StackPanel Background="{TemplateBinding Control.Background}" IsItemsHost="true" ClipToBounds="true"
                        Orientation="Horizontal"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DropShadowBitmapEffect x:Key="PopupDropShadow" ShadowDepth="1.5" Softness="0.15"/>
  <Style TargetType="{x:Type MenuItem}">
    <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HighlightedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HighlightedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                <ColumnDefinition Width="14"/>
              </Grid.ColumnDefinitions>
              <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="4" Background="{DynamicResource NormalBrush}"
                      Opacity="0"/>
              <ContentPresenter x:Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" ContentSource="Icon"/>
              <Grid x:Name="GlyphPanel" Visibility="Hidden" Margin="4,0,6,0" VerticalAlignment="Center">
                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                      Data="M 0,2 L 0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6 Z" FlowDirection="LeftToRight"/>
              </Grid>
              <ContentPresenter x:Name="HeaderHost" Grid.Column="1" Margin="{TemplateBinding Control.Padding}"
                                RecognizesAccessKey="true" ContentSource="Header"/>
              <Grid x:Name="ArrowPanel" Column="3" Margin="4,0,6,0" VerticalAlignment="Center">
                <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                      Data="M 0,0 L 0,8 4,4 Z"/>
              </Grid>
              <Popup x:Name="SubMenuPopup" Placement="Right" Focusable="false" AllowsTransparency="true"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                     VerticalOffset="-3"
                     IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <Grid x:Name="SubMenu">
                  <Border x:Name="SubMenuBorder" Background="{DynamicResource WindowBackgroundBrush}"
                          BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
                  <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                </Grid>
              </Popup>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
              <Setter Property="FrameworkElement.Margin" Value="0,1,0,1"/>
              <Setter Property="Control.Padding" Value="6,3,6,3"/>
              <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
              <Setter TargetName="SubMenuPopup" Property="Popup.Placement" Value="Bottom"/>
              <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="TopLevelItem">
              <Setter Property="FrameworkElement.Margin" Value="0,1,0,1"/>
              <Setter Property="Control.Padding" Value="6,3,6,3"/>
              <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
              <Setter Property="DockPanel.Dock" Value="Top"/>
              <Setter Property="Control.Padding" Value="0,2,0,2"/>
              <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuItem">
              <Setter Property="DockPanel.Dock" Value="Top"/>
              <Setter Property="Control.Padding" Value="0,2,0,2"/>
              <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
              <Setter TargetName="SubMenuPopup" Property="Popup.PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="MenuItem.Icon">
              <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
              <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger SourceName="SubMenuPopup" Property="Popup.AllowsTransparency" Value="true">
              <Setter TargetName="SubMenu" Property="FrameworkElement.Margin" Value="0,0,3,3"/>
              <Setter TargetName="SubMenu" Property="UIElement.SnapsToDevicePixels" Value="true"/>
              <Setter Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder"
                      Property="UIElement.BitmapEffect"/>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HighlightedOff_BeginStoryboard" Storyboard="{StaticResource HighlightedOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HighlightedOn}"/>
              </TriggerBase.EnterActions>
              <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Separator}">
    <Setter Property="FrameworkElement.Height" Value="1"/>
    <Setter Property="FrameworkElement.Margin" Value="0,2,0,2"/>
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type TabControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition0"/>
              <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
              <RowDefinition x:Name="RowDefinition1" Height="*"/>
            </Grid.RowDefinitions>
            <Border x:Name="border" CornerRadius="2,2,0,0" Margin="3,0,0,-2">
              <TabPanel x:Name="HeaderPanel" IsItemsHost="true" ZIndex="1" KeyboardNavigation.TabIndex="1"
                        RenderTransformOrigin="0.5,0.5" Width="Auto" Height="Auto">
                <FrameworkElement.LayoutTransform>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                    <SkewTransform AngleX="0" AngleY="0"/>
                    <RotateTransform Angle="0"/>
                    <TranslateTransform X="0" Y="0"/>
                  </TransformGroup>
                </FrameworkElement.LayoutTransform>
                <UIElement.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                    <SkewTransform AngleX="0" AngleY="0"/>
                    <RotateTransform/>
                    <TranslateTransform X="0" Y="0"/>
                  </TransformGroup>
                </UIElement.RenderTransform>
              </TabPanel>
            </Border>
            <Border x:Name="ContentPanel" Grid.Row="1" Background="{DynamicResource ShadeBrushTop}"
                    BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1" CornerRadius="0,0,3,3"
                    KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local"
                    KeyboardNavigation.TabIndex="2">
              <ContentPresenter x:Name="PART_SelectedContentHost" Margin="4" ContentSource="SelectedContent"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto"/>
              <Setter TargetName="border" Property="Grid.Row" Value="1"/>
              <Setter TargetName="border" Property="Border.CornerRadius" Value="0,0,2,2"/>
              <Setter TargetName="ContentPanel" Property="Border.CornerRadius" Value="3,3,0,0"/>
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Left">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto"/>
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*"/>
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="border" Property="Grid.Column" Value="0"/>
              <Setter TargetName="border" Property="FrameworkElement.Margin" Value="0,0,0,0"/>
              <Setter TargetName="ContentPanel" Property="FrameworkElement.Margin" Value="0,0,0,0"/>
              <Setter TargetName="border" Property="Border.CornerRadius" Value="0,2,2,0"/>
              <Setter TargetName="ContentPanel" Property="Border.CornerRadius" Value="0,3,3,0"/>
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Right">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*"/>
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto"/>
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
              <Setter TargetName="border" Property="Grid.Column" Value="1"/>
              <Setter TargetName="border" Property="Border.CornerRadius" Value="0,2,2,0"/>
              <Setter TargetName="ContentPanel" Property="Border.CornerRadius" Value="3,0,0,3"/>
              <Setter TargetName="border" Property="FrameworkElement.Margin" Value="0,0,0,-2"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type TabItem}">
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid x:Name="grid">
            <FrameworkElement.LayoutTransform>
              <TransformGroup>
                <ScaleTransform ScaleX="1" ScaleY="1"/>
                <SkewTransform AngleX="0" AngleY="0"/>
                <RotateTransform Angle="0"/>
                <TranslateTransform X="0" Y="0"/>
              </TransformGroup>
            </FrameworkElement.LayoutTransform>
            <Grid Margin="1,0,1,0">
              <Border x:Name="Border" Background="{DynamicResource SelectedBackgroundBrush}"
                      BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="3,3,0,0"/>
              <Border x:Name="SelectedBorder" Background="{DynamicResource NormalBrush}"
                      BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="2,2,2,0" CornerRadius="3,3,0,0"
                      Opacity="0" Margin="-2,0,-2,0"/>
              <Border x:Name="HoverBorder" Background="{DynamicResource HoverBrush}" BorderThickness="1,1,1,1"
                      CornerRadius="3,3,0,0" Opacity="0" BorderBrush="{x:Null}"/>
              <Border x:Name="SelectedHoverBorder" Background="{DynamicResource HoverBrush}" BorderThickness="1,1,1,1"
                      CornerRadius="3,3,0,0" Opacity="0" BorderBrush="{x:Null}"/>
              <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Center" Margin="6,3,6,3" VerticalAlignment="Center"
                                RecognizesAccessKey="true" ContentSource="Header"/>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabItem.TabStripPlacement" Value="Left">
              <Setter TargetName="grid" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                    <SkewTransform AngleX="0" AngleY="0"/>
                    <RotateTransform Angle="-90"/>
                    <TranslateTransform X="0" Y="0"/>
                  </TransformGroup>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="TabItem.TabStripPlacement" Value="Right">
              <Setter TargetName="grid" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                    <SkewTransform AngleX="0" AngleY="0"/>
                    <RotateTransform Angle="90"/>
                    <TranslateTransform X="0" Y="0"/>
                  </TransformGroup>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="TabItem.TabStripPlacement" Value="Bottom">
              <Setter TargetName="ContentSite" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                    <SkewTransform AngleX="0" AngleY="0"/>
                    <RotateTransform Angle="180"/>
                    <TranslateTransform X="0" Y="0"/>
                  </TransformGroup>
                </Setter.Value>
              </Setter>
              <Setter TargetName="grid" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                    <SkewTransform AngleX="0" AngleY="0"/>
                    <RotateTransform Angle="180"/>
                    <TranslateTransform X="0" Y="0"/>
                  </TransformGroup>
                </Setter.Value>
              </Setter>
            </Trigger>
            <MultiTrigger>
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="Selector.IsSelected" Value="false"/>
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="TabItem.IsSelected" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}"/>
              </TriggerBase.EnterActions>
              <Setter Property="Panel.ZIndex" Value="100"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="grid" Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="Selector.IsSelected" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="SelectedHoverBorder" Property="UIElement.Opacity" Value="0.6"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
              <Setter TargetName="Border" Value="{DynamicResource DisabledBackgroundBrush}" Property="Border.Background"/>
              <Setter TargetName="Border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
    </Style.Triggers>
  </Style>
  <Style x:Key="NuclearSliderThumb" TargetType="{x:Type Thumb}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.Height" Value="14"/>
    <Setter Property="FrameworkElement.Width" Value="14"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid>
            <Rectangle x:Name="Base" RadiusX="6" RadiusY="6" Fill="#FF000000" StrokeThickness="2"/>
            <Rectangle x:Name="Background" Fill="{TemplateBinding Control.Background}"
                       Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="2" RadiusX="4" RadiusY="4"/>
            <Rectangle x:Name="BackgroundAnimation" Opacity="0" Fill="{StaticResource HoverBrush}" RadiusX="3" RadiusY="3"
                       Margin="2,2,2,2" StrokeThickness="0"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Base" Property="Shape.Fill"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type Slider}">
    <Setter Property="Control.Background" Value="{DynamicResource SelectedBackgroundBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource HorizontalSliderBorderBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Slider}">
          <Grid x:Name="GridRoot">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="Auto" MinHeight="{TemplateBinding FrameworkElement.MinHeight}"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TickBar x:Name="TopTick" Visibility="Collapsed" Height="4" SnapsToDevicePixels="true" Placement="Top"
                     Fill="{DynamicResource GlyphBrush}"/>
            <Border x:Name="Border" Grid.Row="1" Margin="0" Height="4"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2"/>
            <Track x:Name="PART_Track" Grid.Row="1">
              <Track.Thumb>
                <Thumb Style="{DynamicResource NuclearSliderThumb}" Background="{DynamicResource NormalBrush}"
                       BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="2,2,2,2" Width="24" Height="13"/>
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
              </Track.IncreaseRepeatButton>
              <Track.DecreaseRepeatButton>
                <RepeatButton Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
              </Track.DecreaseRepeatButton>
            </Track>
            <TickBar x:Name="BottomTick" Visibility="Collapsed" Grid.Row="2" Height="4" SnapsToDevicePixels="true"
                     Placement="Bottom" Fill="{TemplateBinding Control.Foreground}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Slider.TickPlacement" Value="TopLeft">
              <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="Slider.TickPlacement" Value="BottomRight">
              <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="Slider.TickPlacement" Value="Both">
              <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background"/>
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush"/>
            </Trigger>
            <Trigger Property="Slider.Orientation" Value="Vertical">
              <Setter TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_Track" Property="Track.Orientation" Value="Horizontal"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.BorderThickness" Value="1,1,1,1"/>
  </Style>
  <Style TargetType="{x:Type TreeView}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeView}">
          <Grid>
            <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" CornerRadius="3,3,3,3">
              <ScrollViewer Focusable="false" Padding="4" HorizontalScrollBarVisibility="Auto"
                            VerticalScrollBarVisibility="Auto" CanContentScroll="false">
                <ItemsPresenter/>
              </ScrollViewer>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
  </Style>
  <Style x:Key="NuclearTreeViewItemToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Width="15" Height="13" Background="Transparent">
            <Path x:Name="IsExpandedPath" Visibility="Collapsed" HorizontalAlignment="Left" Margin="1,1,1,1"
                  VerticalAlignment="Center" Data="M 0,4 L 8,4 4,8 Z">
              <Shape.Fill>
                <SolidColorBrush Color="{DynamicResource BlackColor}"/>
              </Shape.Fill>
            </Path>
            <Path x:Name="ExpandPath" HorizontalAlignment="Left" Margin="1,1,1,1" VerticalAlignment="Center"
                  Data="M 4,0 L 8,4 4,8 Z">
              <Shape.Fill>
                <SolidColorBrush Color="{DynamicResource BlackColor}"/>
              </Shape.Fill>
            </Path>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="IsExpandedPath" Property="UIElement.Visibility" Value="Visible"/>
              <Setter TargetName="ExpandPath" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type TreeViewItem}">
    <Style.Triggers>
      <Trigger Property="TreeViewItem.IsSelected" Value="true">
        <Setter Property="Control.Foreground">
          <Setter.Value>
            <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Control.Padding" Value="1,0,0,0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="SelectedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder2"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder1"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder2"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder1"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedHoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedHoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition MinWidth="19" Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition/>
            </Grid.RowDefinitions>
            <ToggleButton x:Name="Expander" Style="{DynamicResource NuclearTreeViewItemToggleButton}" ClickMode="Press"
                          IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
            <Border x:Name="Selection_Border" Grid.Column="1" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}">
              <Grid>
                <Border x:Name="SelectedBorder" Background="{DynamicResource NormalBrush}"
                        BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="2,2,2,2" CornerRadius="2,2,2,2"
                        Opacity="0"/>
                <Border x:Name="HoverBorder1" Opacity="0" Background="{DynamicResource NormalBrush}"
                        BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2"/>
                <Border x:Name="HoverBorder2" Opacity="0" Background="{DynamicResource HoverBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="2,2,2,2" BorderBrush="{x:Null}"/>
                <ContentPresenter x:Name="PART_Header" HorizontalAlignment="Stretch" ContentSource="Header" Margin="3,2,3,2"/>
                <Border x:Name="SelectedHoverBorder" Opacity="0" Background="{DynamicResource HoverBrush}"
                        BorderThickness="1,1,1,1" CornerRadius="2,2,2,2" BorderBrush="{x:Null}"/>
              </Grid>
            </Border>
            <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1"/>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="SelectedHoverOff_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="SelectedHoverOn_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOn}"/>
              </TriggerBase.EnterActions>
              <MultiTrigger.Conditions>
                <Condition Property="TreeViewItem.IsSelected" Value="true"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="TreeViewItem.IsSelected" Value="false"/>
                <Condition SourceName="Selection_Border" Property="UIElement.IsMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
            </MultiTrigger>
            <Trigger Property="TreeViewItem.IsExpanded" Value="false">
              <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="false">
              <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="TreeViewItem.IsSelected" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource SelectedOn}"/>
              </TriggerBase.EnterActions>
              <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Control.Foreground"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="TreeViewItem.IsSelected" Value="true"/>
                <Condition Property="TreeViewItem.IsSelectionActive" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="Selection_Border"
                      Property="Border.Background"/>
              <Setter Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Property="Control.Foreground"/>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}"/>
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Template" Value="{DynamicResource ButtonTemplate}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    <Setter Property="Control.FontSize" Value="10"/>
    <Setter Property="FrameworkElement.MinHeight" Value="18"/>
    <Setter Property="FrameworkElement.MinWidth" Value="50"/>
  </Style>
  <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}">
    <Setter Property="Control.FontSize" Value="10"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Template" Value="{DynamicResource RadioButtonTemplate}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="Control.Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}">
    <Setter Property="Control.FontSize" Value="10"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Template" Value="{DynamicResource CheckBoxTemplate}"/>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="Control.Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
    <Setter Property="Control.FontSize" Value="10"/>
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="Control.Template" Value="{DynamicResource ComboBoxTemplate}"/>
  </Style>
  <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
    <Setter Property="Control.FontSize" Value="10"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="UIElement.AllowDrop" Value="true"/>
    <Setter Property="Control.Template" Value="{DynamicResource TextBoxTemplate}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}"/>
  </Style>
  <LinearGradientBrush x:Key="ToolBarHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFFFFF" Offset="0"/>
    <GradientStop Color="#FFFBFF" Offset="0.5"/>
    <GradientStop Color="#F7F7F7" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ToolBarToggleButtonHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#ECECEC" Offset="0"/>
    <GradientStop Color="#DDDDDD" Offset="0.5"/>
    <GradientStop Color="#A0A0A0" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="ToolBarButtonHover" Color="{StaticResource NormalBrushGradient1}"/>
  <SolidColorBrush x:Key="ToolBarGripper" Color="#C6C3C6"/>
  <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{StaticResource ToolBarToggleButtonHorizontalBackground}"/>
    <Setter Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Bd" SnapsToDevicePixels="true" CornerRadius="0,0,0,0"
                  Background="{DynamicResource SelectedBackgroundBrush}">
            <Canvas SnapsToDevicePixels="true" HorizontalAlignment="Right" Margin="7,2,2,2" VerticalAlignment="Bottom"
                    Width="6" Height="7">
              <Path Stroke="White" Data="M 1,1.5 L 6,1.5 "/>
              <Path Stroke="{TemplateBinding Control.Foreground}" Data="M 0,0.5 L 5,0.5 "/>
              <Path Fill="White" Data="M 0.5,4 L 6.5,4 3.5,7 Z"/>
              <Path Fill="{TemplateBinding Control.Foreground}" Data="M -0.5,3 L 5.5,3 2.5,6 Z"/>
            </Canvas>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Bd" Value="{DynamicResource MouseOverBrush}" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter TargetName="Bd" Value="{StaticResource ToolBarButtonHover}" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource ToolBarGripper}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="#FFFDFDFD"/>
  <SolidColorBrush x:Key="ToolBarMenuBorder" Color="#FFFFFFFF"/>
  <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border SnapsToDevicePixels="true" Background="Transparent" Padding="{TemplateBinding Control.Padding}"
                  CornerRadius="0,0,0,0">
            <Rectangle>
              <Shape.Fill>
                <DrawingBrush TileMode="Tile" Viewbox="0,0,4,4" ViewboxUnits="Absolute" Viewport="0,0,4,4"
                              ViewportUnits="Absolute">
                  <DrawingBrush.Drawing>
                    <DrawingGroup>
                      <GeometryDrawing Brush="White" Geometry="M 1,1 L 1,3 3,3 3,1 Z"/>
                      <GeometryDrawing Brush="{StaticResource ToolBarGripper}" Geometry="M 0,0 L 0,2 2,2 2,0 Z"/>
                    </DrawingGroup>
                  </DrawingBrush.Drawing>
                </DrawingBrush>
              </Shape.Fill>
            </Rectangle>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter Property="FrameworkElement.Cursor" Value="SizeAll"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <LinearGradientBrush x:Key="ToolBarToggleButtonVerticalBackground" EndPoint="1,0" StartPoint="0,0">
    <GradientStop Color="#ECECEC" Offset="0"/>
    <GradientStop Color="#DDDDDD" Offset="0.5"/>
    <GradientStop Color="#A0A0A0" Offset="1"/>
  </LinearGradientBrush>
  <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{StaticResource ToolBarToggleButtonVerticalBackground}"/>
    <Setter Property="FrameworkElement.MinHeight" Value="0"/>
    <Setter Property="FrameworkElement.MinWidth" Value="0"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Control.Background}"
                  CornerRadius="0,0,3,3">
            <Canvas SnapsToDevicePixels="true" HorizontalAlignment="Right" Margin="2,7,2,2" VerticalAlignment="Bottom"
                    Width="7" Height="6">
              <Path Stroke="White" Data="M 1.5,1 L 1.5,6 "/>
              <Path Stroke="{TemplateBinding Control.Foreground}" Data="M 0.5,0 L 0.5,5 "/>
              <Path Fill="White" Data="M 3.5,0.5 L 7,3.5 4,6.5 Z"/>
              <Path Fill="{TemplateBinding Control.Foreground}" Data="M 3,-0.5 L 6,2.5 3,5.5 Z"/>
            </Canvas>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Bd" Value="{StaticResource ToolBarButtonHover}" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter TargetName="Bd" Value="{StaticResource ToolBarButtonHover}" Property="Border.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{StaticResource ToolBarGripper}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <LinearGradientBrush x:Key="ToolBarVerticalBackground" EndPoint="1,0" StartPoint="0,0">
    <GradientStop Color="#FFFFFF" Offset="0"/>
    <GradientStop Color="#FFFBFF" Offset="0.5"/>
    <GradientStop Color="#F7F7F7" Offset="1"/>
  </LinearGradientBrush>
  <Style TargetType="{x:Type ToolBar}">
    <Setter Property="Control.Background" Value="{StaticResource ToolBarHorizontalBackground}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolBar}">
          <Grid x:Name="Grid" SnapsToDevicePixels="true" Margin="3,1,1,1">
            <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
              <ToggleButton x:Name="OverflowButton" IsEnabled="{TemplateBinding ToolBar.HasOverflowItems}"
                            Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}" ClickMode="Press"
                            FocusVisualStyle="{x:Null}"
                            IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
              <Popup x:Name="OverflowPopup" Focusable="false" AllowsTransparency="true" Placement="Bottom"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                     StaysOpen="false"
                     IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <Border x:Name="Shdw">
                  <Border BorderThickness="1,1,1,1" Background="{DynamicResource ShadeBrush}"
                          BorderBrush="{DynamicResource LightBrush}">
                    <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Focusable="true"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="2" WrapWidth="200"
                                          KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"
                                          FocusVisualStyle="{x:Null}"/>
                  </Border>
                </Border>
              </Popup>
            </Grid>
            <Border x:Name="MainPanelBorder" Margin="0,0,11,0" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="0,0,0,0"
                    Padding="{TemplateBinding Control.Padding}" Background="{DynamicResource SelectedBackgroundBrush}">
              <Grid>
                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                  <Thumb x:Name="ToolBarThumb" Padding="6,5,1,6" Margin="-3,-1,0,0"
                         Style="{StaticResource ToolBarThumbStyle}" Width="10"/>
                  <ContentPresenter x:Name="ToolBarHeader" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                    HorizontalAlignment="Center" Margin="4,0,4,0" VerticalAlignment="Center" ContentSource="Header"/>
                  <ToolBarPanel x:Name="PART_ToolBarPanel" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                Margin="0,1,2,2" IsItemsHost="true" Background="{DynamicResource SelectedBackgroundBrush}"/>
                </DockPanel>
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
              <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="false"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="HeaderedItemsControl.Header">
              <Setter TargetName="ToolBarHeader" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="true">
              <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger SourceName="OverflowPopup" Property="Popup.HasDropShadow" Value="true">
              <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
              <Setter TargetName="Shdw" Property="UIElement.SnapsToDevicePixels" Value="true"/>
              <Setter TargetName="Shdw" Property="Border.Background" Value="#71000000"/>
            </Trigger>
            <Trigger Property="ToolBar.Orientation" Value="Vertical">
              <Setter TargetName="Grid" Property="FrameworkElement.Margin" Value="1,3,1,1"/>
              <Setter TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"
                      Property="FrameworkElement.Style"/>
              <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Height" Value="10"/>
              <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Width" Value="Auto"/>
              <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Margin" Value="-1,-3,0,0"/>
              <Setter TargetName="ToolBarThumb" Property="Control.Padding" Value="5,6,6,1"/>
              <Setter TargetName="ToolBarHeader" Property="FrameworkElement.Margin" Value="0,0,0,4"/>
              <Setter TargetName="PART_ToolBarPanel" Property="FrameworkElement.Margin" Value="1,0,2,2"/>
              <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top"/>
              <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top"/>
              <Setter TargetName="OverflowGrid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
              <Setter TargetName="OverflowGrid" Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
              <Setter TargetName="OverflowPopup" Property="Popup.Placement" Value="Right"/>
              <Setter TargetName="MainPanelBorder" Property="FrameworkElement.Margin" Value="0,0,0,11"/>
              <Setter Value="{StaticResource ToolBarVerticalBackground}" Property="Control.Background"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground" Value="#FF000000"/>
  </Style>
  <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
  <Style TargetType="{x:Type GroupBox}">
    <Setter Property="Control.BorderBrush" Value="#D5DFE5"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GroupBox}">
          <Grid SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="6"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="6"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="*"/>
              <RowDefinition Height="6"/>
            </Grid.RowDefinitions>
            <Border Grid.ColumnSpan="4" Grid.RowSpan="4" Background="{DynamicResource LightBrush}"
                    CornerRadius="4,4,4,4" BorderThickness="1,1,1,1"/>
            <Border Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderThickness="1,1,1,1" CornerRadius="4"
                    BorderBrush="{DynamicResource NormalBorderBrush}">
              <UIElement.OpacityMask>
                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                  <Binding Path="ActualWidth" ElementName="Header"/>
                  <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                </MultiBinding>
              </UIElement.OpacityMask>
              <Border BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="3">
                <Border.BorderBrush>
                  <SolidColorBrush Color="{DynamicResource MainColor}"/>
                </Border.BorderBrush>
                <Border BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2">
                  <Border.BorderBrush>
                    <SolidColorBrush Color="{DynamicResource MainColor}"/>
                  </Border.BorderBrush>
                </Border>
              </Border>
            </Border>
            <Border Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3"
                    Background="{TemplateBinding Control.Background}" BorderBrush="Transparent"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4"/>
            <Border x:Name="Main" Grid.ColumnSpan="4" Grid.RowSpan="2" Background="{DynamicResource NormalBrush}"
                    BorderThickness="1,1,1,0" CornerRadius="2,2,0,0" BorderBrush="{DynamicResource NormalBorderBrush}"/>
            <Rectangle x:Name="Shine" Opacity="1" RadiusX="3" RadiusY="3" VerticalAlignment="Stretch" Height="Auto"
                       Grid.ColumnSpan="4" Grid.RowSpan="2" Margin="1,1,1,1" Stroke="{x:Null}">
              <Shape.Fill>
                <LinearGradientBrush EndPoint="0.5,0.971" StartPoint="0.5,0.042">
                  <GradientStop Color="#26FFFFFF" Offset="0"/>
                  <GradientStop Color="#00FFFFFF" Offset="1"/>
                  <GradientStop Color="#26FFFFFF" Offset="0.467"/>
                  <GradientStop Color="#00FFFFFF" Offset="0.475"/>
                </LinearGradientBrush>
              </Shape.Fill>
            </Rectangle>
            <Border x:Name="Header" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Padding="3,1,3,0">
              <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" ContentSource="Header"
                                RecognizesAccessKey="true" Margin="0,4,0,4"/>
            </Border>
            <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              Margin="{TemplateBinding Control.Padding}" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="2"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground">
      <Setter.Value>
        <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ListBorder" Color="#828790"/>
  <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}">
    <Setter Property="UIElement.Focusable" Value="false"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid SnapsToDevicePixels="true" Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <DockPanel Margin="{TemplateBinding Control.Padding}">
              <ScrollViewer Focusable="false" DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden">
                <GridViewHeaderRowPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="2,0,2,0"
                                            AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}">
                  <GridViewRowPresenterBase.Columns>
                    <Binding Path="TemplatedParent.View.Columns" RelativeSource="{RelativeSource TemplatedParent}"/>
                  </GridViewRowPresenterBase.Columns>
                </GridViewHeaderRowPresenter>
              </ScrollViewer>
              <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                      Content="{TemplateBinding ContentControl.Content}"
                                      ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                      CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                      KeyboardNavigation.DirectionalNavigation="Local"/>
            </DockPanel>
            <ScrollBar x:Name="PART_HorizontalScrollBar"
                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Cursor="Arrow"
                       Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0.0"
                       Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ScrollBar x:Name="PART_VerticalScrollBar"
                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Cursor="Arrow"
                       Grid.Column="1" Orientation="Vertical" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0.0"
                       Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <DockPanel Grid.Column="1" Grid.Row="1" LastChildFill="false"
                       Background="{Binding Path=Background, ElementName=PART_VerticalScrollBar}">
              <Rectangle Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Width="1"
                         Fill="White" DockPanel.Dock="Left"/>
              <Rectangle Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Height="1"
                         Fill="White" DockPanel.Dock="Top"/>
            </DockPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ListView}">
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.Foreground" Value="#FF042271"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Border x:Name="Bd" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,2,2"
                  BorderBrush="{DynamicResource DefaultedBorderBrush}" Background="{DynamicResource LightBrush}">
            <ScrollViewer Padding="{TemplateBinding Control.Padding}"
                          Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="Border.Background"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ListViewItemFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Stroke="#8E6EA6F5" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ListViewItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ListViewItemFocusVisual}"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,1"/>
    <Setter Property="Control.Padding" Value="5,2,5,2"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedHoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedHoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverRectangle"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Border x:Name="border" SnapsToDevicePixels="true" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2">
            <Grid Margin="2,0,2,0">
              <Rectangle x:Name="Background" IsHitTestVisible="false" Fill="{StaticResource SelectedBackgroundBrush}"
                         RadiusX="0"/>
              <Rectangle x:Name="SelectedRectangle" IsHitTestVisible="false" Opacity="0" Fill="{StaticResource NormalBrush}"
                         RadiusX="0"/>
              <GridViewRowPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Stretch"
                                    Margin="0,2,0,2"/>
              <Rectangle x:Name="HoverRectangle" IsHitTestVisible="false" Fill="{StaticResource HoverBrush}" RadiusX="0"
                         Opacity="0"/>
              <Rectangle x:Name="SelectedHoverRectangle" IsHitTestVisible="false" Fill="{StaticResource HoverBrush}"
                         RadiusX="0" Opacity="0"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ListBoxItem.IsSelected" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <MultiTrigger>
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
                <Condition Property="Selector.IsSelected" Value="false"/>
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <MultiTrigger>
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="SelectedHoverOff_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="SelectedHoverOn_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOn}"/>
              </TriggerBase.EnterActions>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelected" Value="true"/>
                <Condition Property="UIElement.IsMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="true"/>
                <Condition Property="Selector.IsSelectionActive" Value="false"/>
              </MultiTrigger.Conditions>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
  </Style>
  <Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
    <Setter Property="Canvas.Right" Value="-8.5"/>
    <Setter Property="FrameworkElement.Width" Value="18"/>
    <Setter Property="FrameworkElement.Height"
            Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
    <Setter Property="Control.Padding" Value="0,3,0,4"/>
    <Setter Property="Control.Background" Value="{DynamicResource LightBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Padding="{TemplateBinding Control.Padding}" Background="#00FFFFFF">
            <Rectangle HorizontalAlignment="Center" Width="0.5">
              <Shape.Fill>
                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
              </Shape.Fill>
            </Rectangle>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type GridViewColumnHeader}">
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Background" Value="{DynamicResource LightBrush}"/>
    <Setter Property="Control.Padding" Value="2,0,2,0"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Main" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.65"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Main" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid Margin="0,1,0,1">
            <Grid>
              <Border x:Name="Main" BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Padding="{TemplateBinding Control.Padding}" Background="{DynamicResource NormalBrush}"
                      BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="0,0,0,0"/>
              <Border x:Name="HoverBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Padding="{TemplateBinding Control.Padding}" Background="{DynamicResource HoverBrush}"
                      CornerRadius="0,0,0,0" Opacity="0" BorderBrush="{x:Null}"/>
              <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Padding="{TemplateBinding Control.Padding}">
                <Border.BorderBrush>
                  <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                </Border.BorderBrush>
                <ContentPresenter VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  RecognizesAccessKey="true" Margin="2,2,2,2"/>
              </Border>
            </Grid>
            <Canvas>
              <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource GridViewColumnHeaderGripper}"
                     HorizontalAlignment="Stretch"/>
            </Canvas>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="FrameworkElement.Height" Value="Auto">
              <Setter Property="FrameworkElement.MinHeight" Value="20"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
            </Trigger>
            <Trigger Property="GridViewColumnHeader.Role" Value="Padding">
              <Setter TargetName="PART_HeaderGripper" Property="UIElement.Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="GridViewColumnHeader.Role" Value="Floating">
              <Setter TargetName="PART_HeaderGripper" Property="UIElement.Visibility" Value="Collapsed"/>
              <Setter Property="Control.Background" Value="Yellow"/>
              <Setter Value="{DynamicResource MouseOverBrush}" Property="Control.Foreground"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="true" Margin="2" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#F3F3F3" Offset="0"/>
    <GradientStop Color="#EBEBEB" Offset="0.5"/>
    <GradientStop Color="#DDDDDD" Offset="0.5"/>
    <GradientStop Color="#CDCDCD" Offset="1"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
  <Style TargetType="{x:Type ToggleButton}">
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter Property="Control.Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
      </Trigger>
    </Style.Triggers>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
    <Setter Property="Control.Background" Value="{DynamicResource SelectedBackgroundBrush}"/>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBrush}"/>
    <Setter Property="Control.BorderThickness" Value="2,2,2,2"/>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Padding" Value="1"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <FrameworkTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="Opacity">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="Opacity">
                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckedBorder"
                                             Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </FrameworkTemplate.Resources>
          <Grid>
            <Border x:Name="Background" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4,4,4,4" Opacity="0.9"/>
            <Border x:Name="CheckedBorder" Opacity="0" Background="{StaticResource NormalBrush}"
                    BorderBrush="{DynamicResource NormalBrush}" BorderThickness="2,2,2,2" CornerRadius="4"/>
            <Border x:Name="BackgroundAnimation" Opacity="0" Background="{StaticResource HoverBrush}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4"/>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="true"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.IsPressed" Value="true"/>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true"/>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <TriggerBase.ExitActions>
                <BeginStoryboard x:Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}"/>
              </TriggerBase.ExitActions>
              <TriggerBase.EnterActions>
                <BeginStoryboard x:Name="CheckedOn_BeginStoryboard" Storyboard="{StaticResource CheckedOn}"/>
              </TriggerBase.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Background" Value="{DynamicResource DisabledBackgroundBrush}"
                      Property="Border.Background"/>
              <Setter TargetName="Background" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>